.data
pleaseN: .asciiz "Please enter a number n:\n"
pleaseK: .asciiz "Please enter a number k:\n"
valueChoose: .asciiz "The value of choose is "

.text
#Ask user for n & k
addi $v0, $zero, 4
la $a0, pleaseN
syscall
addi $v0, $zero, 5
syscall
add $t0, $zero, $v0
addi $v0, $zero, 4
la $a0, pleaseK
syscall
addi $v0, $zero, 5
syscall
add $t1, $zero, $v0
#Call choose procedure
add $a0, $zero, $t0
add $a1, $zero, $t1
add $s0, $zero, $a1	## Our original K
addi $v0, $zero, 0
jal choose

choose:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	#Check Base Cases
	slt $t0, $a0, $a1
	beq $t0, 1, return0
	beq $a0, $a1, returnEqual
	beq $a1, 0, return1
	#Increment n and k, save n-1 and k to the stack
	subi $a0, $a0, 1
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	subi $a1, $a1, 1
	#Run recursive n-1,k-1
	jal choose
	#Run recursive n-1,k
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 8
	jal choose
	add $v0, $v0, 1
	
	j choose
	
	return0: #if the condition is broken
		addi $v0, $v0, 0
		j exit
	returnEqual:
		beq $a0, $s0, checkEqual	#due to the algorithm in use, the final case will always be when (any given n) = (any given k) = (original k)
		addi $sp, $sp, 4
		lw $a1, 0($sp)
		addi $sp, $sp, 4
		lw $a0, 0($sp)
		addi $sp, $sp, 8
		jr $ra	
	checkEqual:
		beq $a1, $s0, exitRecursion #The algorithm's last base case will always be when some iteration of n = original k
		addi $sp, $sp, 4
		lw $a1, 0($sp)
		addi $sp, $sp, 4
		lw $a0, 0($sp)
		addi $sp, $sp, -4
		jr $ra	
	exitRecursion:
		addi $v0, $v0, 1
		j exit
	return1:
		addi $v0, $v0, 1
		jr $ra
	
	
exit:
add $t0, $zero, $v0
addi $v0, $zero, 4
la $a0, valueChoose
syscall
addi $v0, $zero, 1
add $a0, $zero, $t0
syscall
addi $v0, $zero, 10
syscall

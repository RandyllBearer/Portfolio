Randyll Bearer
rlb97@pitt.edu
Assignment 3

1. So first things first, my program works perfectly fine for the small.txt / medium.txt / medium-large.txt examples, but in order to get the large.txt to work I have to launch
it in command prompt like this 
 "java -Xss4000000m FriendsCoupon.java filename #coupons"
From what I've gathered online this changes the default stack-size that Java can work with, and running it like so allows large.txt to complete.  None of the other examples requires
this work-around. I'm assuming I have this problem because my recursions are not as optimized as they could be, but unfortunatley midterms are preventing me from dedicating more time.

2. Since large.txt doesn't consistently work I included a few lines of code which tests and displays my program to confirm that it is infact making progress. [Can be commented out]
	Line 47: diplayCreatedMatrix()	//shows the matrix read-in from the text file to assure me that I was copying it correctly
	Line 65-67: a for loop		//Prints out the current state of the partialSolution for each recursion, shows that progress towards a solution is indeed being made [I.E. no infinite recursion, just a lot of it]

3. My test methods [testIsFullSolution(), testReject(), etc.] are pretty bare bones because of how reliant they are on other methods.  For example, my isFullSolution() only checks
to see if the last step is correct, because it assumes that reject() has checked that all previous ones have been. Therefore, there shouldn't be many corner cases which haven't been
already checked or prevented.

4. My main recursive method which actually does the backtracking is Line64: backtrace():
	1. Checks to see if a full solution [if yes, output solution]
	2. Checks to see if it should be rejected [if yes, go to next coupon type / if no, extend solution
	3. rinse and repeat.